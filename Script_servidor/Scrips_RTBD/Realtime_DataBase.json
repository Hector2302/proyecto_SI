{
  "commands": {
    "shutdown_system": false,
    "trigger_test": false
  },
  "system": {
    "commands": {
      "last_command": {
        "author": "admin",
        "timestamp": "2025-07-08 00:34:59",
        "type": "shutdown"
      }
    },
    "sensor_data": {
      "actuators": {
        "alarm_active": false,
        "pump_active": false
      },
      "flow": {
        "current_rate": 0,
        "total": 0
      },
      "sensors": {
        "co_ppm": 17.8,
        "flame_detected": false,
        "flame_intensity": 0.1,
        "temperature": 26.3
      },
      "status": {
        "fire_alarm": false,
        "shutdown": false,
        "test_mode": false
      },
      "timestamp": "2025-07-08 02:02:55"
    },
    "status": "online"
  }
}
/*
 * ESTRUCTURA DE DATOS REAL DEL SISTEMA:
 * 
 * 1. SENSORES (publicados cada 0.5s por ESP32):
 *    - temperature: Temperatura en °C del LM35
 *    - flame_detected: Boolean si se detecta llama
 *    - flame_intensity: Intensidad de llama 0-100%
 *    - co_ppm: Concentración de CO en PPM del MQ-2
 * 
 * 2. ACTUADORES (controlados por PIC):
 *    - alarm_active: Estado de la alarma
 *    - pump_active: Estado de la bomba
 * 
 * 3. FLUJO DE AGUA (medido por PIC):
 *    - current_rate: Flujo actual en L/min
 *    - total: Total acumulado en litros
 * 
 * 4. ESTADO DEL SISTEMA:
 *    - fire_alarm: Alarma de incendio activa
 *    - test_mode: Modo de prueba activo
 *    - shutdown: Sistema apagado
 * 
 * 5. COMANDOS (desde la app):
 *    - trigger_test: Iniciar prueba del sistema
 *    - shutdown_system: Apagar/encender sistema
 * 
 * 6. HISTORIAL POR CATEGORÍAS:
 *    - fire: Eventos de incendio (fire_start, fire_end)
 *    - test: Eventos de prueba (test_start, test_end)
 *    - status: Eventos de estado (shutdown, resume)
 * 
 * NOTA: Los eventos _end incluyen datos completos del sistema
 */

{
  "rules": {
    ".read": "auth != null",
    ".write": false,
    "system": {
      "sensor_data": {
        ".read": "auth != null",
        ".write": "auth != null && auth.uid === 'g1Obxd3rPaXiOWHnF3brjeRSAEx1'"
      },
      "sensors": {
        ".read": "auth != null",
        ".write": "auth != null && auth.uid === 'g1Obxd3rPaXiOWHnF3brjeRSAEx1'"
      },
      "actuators": {
        ".read": "auth != null",
        ".write": "auth != null && auth.uid === 'g1Obxd3rPaXiOWHnF3brjeRSAEx1'"
      },
      "flow": {
        ".read": "auth != null",
        ".write": "auth != null && auth.uid === 'g1Obxd3rPaXiOWHnF3brjeRSAEx1'"
      },
      "status": {
        ".read": "auth != null",
        ".write": "auth != null && auth.uid === 'g1Obxd3rPaXiOWHnF3brjeRSAEx1'"
      },
      "commands": {
        ".read": "auth != null",
        "trigger_test": {
          ".write": "auth != null && (auth.uid === 'qIrC9TYimQQL5hZzeaGN1c1aOav1' || auth.uid === 'g1Obxd3rPaXiOWHnF3brjeRSAEx1')"
        },
        "shutdown_system": {
          ".write": "auth != null && (auth.uid === 'qIrC9TYimQQL5hZzeaGN1c1aOav1' || auth.uid === 'g1Obxd3rPaXiOWHnF3brjeRSAEx1')"
        },
        "last_command": {
          ".write": "auth != null && auth.uid === 'g1Obxd3rPaXiOWHnF3brjeRSAEx1'"
        }
      },
      "history": {
        ".read": "auth != null",
        ".write": "auth != null && auth.uid === 'g1Obxd3rPaXiOWHnF3brjeRSAEx1'"
      }
    },
    "commands": {
      ".read": "auth != null",
      "trigger_test": {
        ".write": "auth != null && (auth.uid === 'qIrC9TYimQQL5hZzeaGN1c1aOav1' || auth.uid === 'g1Obxd3rPaXiOWHnF3brjeRSAEx1')"
      },
      "shutdown_system": {
        ".write": "auth != null && (auth.uid === 'qIrC9TYimQQL5hZzeaGN1c1aOav1' || auth.uid === 'g1Obxd3rPaXiOWHnF3brjeRSAEx1')"
      }
    }
  }
}


